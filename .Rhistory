use_mit_license("Your Name")
getwd()
library(devtools)
library(roxygen2)
roxygen2::roxygenise()
devtools::document()
devtools::check()
roxygen2::roxygenise()
devtools::document()
devtools::install()
citation()
citation("KleanLastic")
getwd()
# Replace KleanLastic with IlastiKlean in relevant files
replace_package_name <- function(path = ".", old = "KleanLastic", new = "IlastiKlean") {
files <- list.files(path, recursive = TRUE, full.names = TRUE,
pattern = "\\.(R|r|Rmd|md|Rd|Rproj|txt|yaml|yml|html|qmd)$")
for (file in files) {
content <- readLines(file, warn = FALSE)
if (any(grepl(old, content))) {
cat("Updating:", file, "\n")
content <- gsub(old, new, content)
writeLines(content, file)
}
}
}
replace_package_name()
replace_package_name(path = "./R/")
devtools::document()
devtools::install()
library(IlastiKlean)
??IlastiKlean
?IlastiKlean
??IlastiKlean
#Stacy Welker
#March 2025
#stacy.welker@ufl.edu
###################################################################################
#This script will create several dataframes which mimic typical output from Ilastik
#segmentation projects. The dataframes will be exported to the working directory as
#.csv files. The user can reimport them into R.
#The script will then collate all the mock ilastik output csv files in the working
#directory into a dataframe, count the callose formations in the images,
#and run a t-test on the counts.
##################################################################################
#specify your working directory. Right click the folder where you want to keep your results,
#select "copy as path" and paste it into the parenthesis.
#Make sure to replace all back (\) slashes with forward (/) slashes,
#or R will throw an error and not switch the working directory.
setwd("C:/Users/raffe/OneDrive - University of Florida/2025_Quantification_of_Callose_chapter/example_directory")
#load packages
library("tidyverse")
library("dplyr")
library("agricolae")
library("reshape2")
library("fs")
library("stringr")
library("readxl")
library("writexl")
library("pscl")
####Create a mock dataset which mimics typical outputs from Ilastik.####
#There will be two plants with three samples each. Each sample will have 3 pictures.
#First, create a vector that will contain the  types of objects we labeled in Ilastik
#this will be drawn from randomly. Callose is weighted more heavily to make sure it's
#in the sheets.
#The user only needs to create these sheets once. After they are exported to the working directory,
#they can skip to the step where the files are importe4d back into Ilastik as dataframes.
classes<- c("Callose", "Artifact", "Background")
#create a function which will generate a mock dataset
df_function1 <- function(plantx, samplex, picx) {
dataset.ch00_plantx_samplex_picx <- data.frame(object_id = c(1,2,3),
`Predicted Class` = sample(classes, 3, replace = TRUE),
`Size in pixels` = sample(10:10000, 3),
`Probability of Callose` = runif(3, 0, 1),
`Variance of Intensity_0` = runif(3, 1, 1000),
`Maximum intensity_0`  = sample(1:255, 3),
`Center of the object_0` = runif(3, 1, 1044),
check.names = FALSE)
}
#use a different function for plant 2 to try to create differences
#in callose amounts
classes2<- c("Callose", "Callose", "Background", "Callose")
df_function2 <- function(plantx, samplex, picx) {
dataset.ch00_plantx_samplex_picx <- data.frame(object_id = c(1,2,3),
`Predicted Class` = sample(classes2, 3, replace = TRUE),
`Size in pixels` = sample(10:10000, 3),
`Probability of Callose` = runif(3, 0, 1),
`Variance of Intensity_0` = runif(3, 1, 1000),
`Maximum intensity_0`  = sample(1:255, 3),
`Center of the object_0` = runif(3, 1, 1044),
check.names = FALSE)
}
#call the function to generate the required number of dataframes.
dataset.ch00_plant1_sample1_pic1 <- df_function1(plant1, sample1, pic1)
dataset.ch00_plant1_sample1_pic2 <- df_function1(plant1, sample1, pic2)
dataset.ch00_plant1_sample1_pic3 <- df_function1(plant1, sample1, pic3)
dataset.ch00_plant1_sample2_pic1 <- df_function1(plant1, sample2, pic1)
dataset.ch00_plant1_sample2_pic2 <- df_function1(plant1, sample2, pic2)
dataset.ch00_plant1_sample2_pic3 <- df_function1(plant1, sample2, pic3)
dataset.ch00_plant1_sample3_pic1 <- df_function1(plant1, sample3, pic1)
dataset.ch00_plant1_sample3_pic2 <- df_function1(plant1, sample3, pic2)
dataset.ch00_plant1_sample3_pic3 <- df_function1(plant1, sample3, pic3)
dataset.ch00_plant2_sample1_pic1 <- df_function2(plant2, sample1, pic1)
dataset.ch00_plant2_sample1_pic2 <- df_function2(plant2, sample1, pic2)
dataset.ch00_plant2_sample1_pic3 <- df_function2(plant2, sample1, pic3)
dataset.ch00_plant2_sample2_pic1 <- df_function2(plant2, sample2, pic1)
dataset.ch00_plant2_sample2_pic2 <- df_function2(plant2, sample2, pic2)
dataset.ch00_plant2_sample2_pic3 <- df_function2(plant2, sample2, pic3)
dataset.ch00_plant2_sample3_pic1 <- df_function2(plant2, sample3, pic1)
dataset.ch00_plant2_sample3_pic2 <- df_function2(plant2, sample3, pic2)
dataset.ch00_plant2_sample3_pic3 <- df_function2(plant2, sample3, pic3)
#Export these mock datasets as csv files to the working directory.
write.csv(dataset.ch00_plant1_sample1_pic1, "dataset.ch00_plant1_sample1_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample1_pic2, "dataset.ch00_plant1_sample1_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample1_pic3, "dataset.ch00_plant1_sample1_pic3.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample2_pic1, "dataset.ch00_plant1_sample2_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample2_pic2, "dataset.ch00_plant1_sample2_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample2_pic3, "dataset.ch00_plant1_sample2_pic3.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample3_pic1, "dataset.ch00_plant1_sample3_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample3_pic2, "dataset.ch00_plant1_sample3_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant1_sample3_pic3, "dataset.ch00_plant1_sample3_pic3.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample1_pic1, "dataset.ch00_plant2_sample1_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample1_pic2, "dataset.ch00_plant2_sample1_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample1_pic3, "dataset.ch00_plant2_sample1_pic3.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample2_pic1, "dataset.ch00_plant2_sample2_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample2_pic2, "dataset.ch00_plant2_sample2_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample2_pic3, "dataset.ch00_plant2_sample2_pic3.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample3_pic1, "dataset.ch00_plant2_sample3_pic1.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample3_pic2, "dataset.ch00_plant2_sample3_pic2.csv", row.names = F)
write.csv(dataset.ch00_plant2_sample3_pic3, "dataset.ch00_plant2_sample3_pic3.csv", row.names = F)
####Start here if the mock data was previously exported as .csv files ####
#Now create a function that reads csv files from the working directory,
#converts all the columns to characters,
#combines all the common columns into one big data frame,
#and mutates the data frame so that the file names are attached to each row
read_plus <- function(flnm) {
read_csv(flnm, col_types = cols(.default = "c")) %>%
mutate(filename = flnm)
}
#make a dataframe of all csv files in the working directory
#NOTE: If you later export results as csv files,
#these will also be read into this dataframe next time the script is run.
#This will cause errors.
#So it's best to place results from your analyses later in the script in a new folder.
objects_with_file_names <-
list.files(pattern = "*.csv",
full.names = F) %>%
map_df(~read_plus(.))
#observe the default column names from Ilastik. These often contain
#spaces which causes problems for R.
names(objects_with_file_names)
#change the space to underscores
names(objects_with_file_names) <- gsub(" ", "_", names(objects_with_file_names))
#clean up the data frame by re-selecting only the numbers of the columns you want to keep.
#The variables that you keep will differ depending on what is needed for your analysis.
#here, we will keep the predicted class, the size in pixels, and the file name.
objects_with_file_names <- objects_with_file_names[, c(2, 3, 8)]
#Observe the file name column. Hopefully when the pictures were taken,
#all of the relevant experimental information such as plant type, treatment, rep, etc
#was stored in the name. Here, we will break each piece of information
#into a new column so it can be used for analysis.
#First, drop any information that is sometimes added by the microscope
#software that is not useful for this purpose.
objects_with_file_names<- objects_with_file_names %>%
mutate(filename = str_replace_all(filename, "dataset.ch00_", "")) %>%
mutate(filename = str_replace_all(filename, ".csv", ""))
#now break the file name at the underscores into three columns:
#plant number, sample number, and picture number
objects_with_file_names<- objects_with_file_names %>%
separate_wider_delim(filename, delim = "_", names = c("plant", "sample", "pic_number"), too_many = "merge")
# count the number of mock images in each dataset. We will use this as a reference to compute averages later.
#some images may have zero callose objects. This dataframe will ensure we can add these zeros
#to the total when computing the average.
n_reference<- objects_with_file_names %>% count(plant, sample, pic_number)
#remove all items from the data frame that do not contain "Callose" in the predicted_class column
callose_table<- subset(objects_with_file_names, Predicted_Class == "Callose")
#Now, create a summary table of callose formation counts for each picture
#first must ensure that variables are numeric
callose_table$Size_in_pixels<-as.numeric(callose_table$Size_in_pixels)
#Next, create a summary that will get a count of all the callose objects
#in each picture. Note that not all pictures will have callose.
callose_summary <- callose_table %>%
group_by(plant, sample, pic_number) %>%
summarise(
callose_count = n(),
mean_size = mean(Size_in_pixels))
callose_summary <- ungroup(callose_summary)
#If we observe the length of n_reference and callose_summary, we can see that they are different.
#So some images had no callose formations.
nrow(n_reference)
nrow(callose_summary)
#We must make this explicit in the dataset so that this can be accounted for in the averages.
#we can simply left join the two dataframes, starting with n_reference.
#this will fill the values missing in callose_summary with 0.
full_summary<- n_reference %>%
left_join(callose_summary) %>%
replace_na(list(callose_count = 0, mean_size = 0))
####visualization####
#can use a boxplot to give more info about the distribution of the dataset
count_summary_box_plot <- ggplot(data=full_summary,
aes(x=plant, y=callose_count, fill = plant)) +
geom_boxplot(width = 0.5, linewidth = 0.9) +
theme_bw(24) +
labs(x= "Plant Number",
y= "Mean callose deposit \ncount") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.4),
legend.position= "none") +
scale_fill_manual(values=c("#D81B60", "#004D40"))
count_summary_box_plot
#save the box plot
ggsave(filename = "count_box_plot.png", count_summary_box_plot,
width = 5, height = 5, dpi = 300, units = "in", device='png')
#now get average and variance of formation counts per plant
stats_summary <- full_summary  %>%
group_by(plant) %>%
summarise(
n = n(),
meancount = mean(callose_count),
sd_count = sd(callose_count),
se_count = (sd_count/(sqrt(n))))
#Bar plot for publication
count_summary_plot <- ggplot(data=stats_summary,
aes(x=plant, y=meancount, fill=plant)) +
geom_bar(stat="identity", position="dodge", width = 0.5) +
theme_bw(24) +
labs(x= "Plant Number",
y= "Mean callose deposit \ncount") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.4),
legend.position= "none") +
scale_fill_manual(values=c("#D81B60", "#004D40"))+
geom_errorbar(aes(ymin=meancount-se_count, ymax=meancount+se_count), width=.2,
position=position_dodge(.9), linewidth=1)
count_summary_plot
#save the count graph
ggsave(filename = "count_plot_plant_summary.png", count_summary_plot,
width = 5, height = 5, dpi = 300, units = "in", device='png')
####statistical testing ####
#to look for significant differences between plant distributions
#first conduct Shapiro's test on the count data to see if it's normally distributed
shapiro.test(full_summary$callose_count)
#Look at histogram to get a better idea:
hist(full_summary$callose_count)
#This mock dataset is drawn randomly, and happens to meet the assumptions of a t test.
#However, many real callose datasets are not normally distributed.
#often they are zero-inflated or skewed.
#If the sample size is large (~100), the t test will still likely be appropriate.
#however, in smaller samples (<30), other tests,
#or even regression models (zero-inflated negative binomial for example) may be a better fit.
#Always consider your own dataset and its distribution carefully.
#here we will use the Welch two sample t test which does not assume equal variances.
#we will use a one sided test, where we assume that the mean count from one plant is
#higher than the other.
t.test(callose_count~plant, data = full_summary)
#for this mock dataset, we know that plant 2 had a higher count because we
#built that into the function.
#the p-value from the t test is 0.002, meaning there is a
#significant difference in the mean callose formation count
#in the images of the two plants' phloem.
#the user's result may be slightly different because the data was randomly drawn.
#### Section for >2 treatment groups ####
install.packages("palmerpenguins")
library(palmerpenguins)
#create a dataset
dat <- penguins %>%
select(species, flipper_length_mm)
source("R/visualize_and_analyze_callose.R")
res <- visualize_and_analyze_callose(
df = dat,
group_col = "species",
count_col = "flipper_length_mm",
boxplot_filename = "penguin_flipper_box.png"
)
source("R/visualize_and_analyze_callose.R")
res <- visualize_and_analyze_callose(
df = dat,
group_col = "species",
count_col = "flipper_length_mm",
boxplot_filename = "penguin_flipper_box.png"
)
summary(res$posthoc)
source("R/visualize_and_analyze_callose.R")
res <- visualize_and_analyze_callose(
df = dat,
group_col = "species",
count_col = "flipper_length_mm",
boxplot_filename = "penguin_flipper_box.png"
)
source("R/visualize_and_analyze_callose.R")
res <- visualize_and_analyze_callose(
df = dat,
group_col = "species",
count_col = "flipper_length_mm",
boxplot_filename = "penguin_flipper_box.png"
)
source("R/visualize_and_analyze_callose.R")
res <- visualize_and_analyze_callose(
df = dat,
group_col = "species",
count_col = "flipper_length_mm",
boxplot_filename = "penguin_flipper_box.png"
)
devtools::document()
rm(list = c("visualize_and_analyze_callose"))
devtools::document()
usethis::use_vignette(
"Cleaning-and-analysis-of-Ilastik-generated-csv-files-with-IlastiKlean"
)
devtools::build_vignettes()
devtools::check()
devtools::install(build_vignettes = TRUE)
vignette("Cleaning-and-analysis-of-Ilastik-generated-csv-files-with-IlastiKlean", package = "IlastiKlean")
vignette("Cleaning-and-analysis-of-Ilastik-generated-csv-files-with-IlastiKlean", package = "IlastiKlean")
devtools::build_vignettes()
devtools::check()
devtools::install(build_vignettes = TRUE)
vignette("Cleaning-and-analysis-of-Ilastik-generated-csv-files-with-IlastiKlean", package = "IlastiKlean")
